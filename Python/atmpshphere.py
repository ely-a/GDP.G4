import numpy as np
from scipy.interpolate import interp1d
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
from scipy.special import erfcinv
# matplotlib inline


# Templates for density, temperature, pressure as function of altitude
# Units: kg/m3, Pa, K, km respectively

def _prepare_data1():
    data1 = np.array([
        [733.3333333333334, 4000], [730.3647526182738, 3894.3661971830984],
        [728.4795955218491, 3732.3943661971825], [724.564824846515, 3549.295774647887],
        [720.6067172264356, 3408.4507042253517], [716.6847237269774, 3232.394366197182],
        [708.6890574214519, 3028.169014084508], [700.7150595882993, 2802.8169014084497],
        [685.5543517515348, 2584.507042253521], [670.3791982665223, 2380.281690140844],
        [648.0462260743951, 2154.929577464789], [620.5706031058145, 1943.6619718309855],
        [585.929938605995, 1718.3098591549292], [545.092091007584, 1535.2112676056338],
        [512.4015890213074, 1408.4507042253522], [472.53159985554345, 1281.6901408450703],
        [434.69122426868915, 1176.0563380281692], [402.9758035391839, 1098.5915492957747],
        [363.06970025279884, 1007.0422535211268], [330.33586132177686, 922.5352112676069],
        [299.65330444203687, 838.0281690140831], [265.8938244853738, 753.5211267605641],
        [231.11592632719396, 661.9718309859154], [203.51029252437706, 577.4647887323943],
        [182.02239075478514, 528.1690140845063], [173.8389310220296, 507.0422535211274],
        [162.58577103647528, 478.87323943662045], [161.61791260382807, 422.53521126760563],
        [161.67569519682195, 366.1971830985925], [159.67497291440955, 316.9014084507046],
        [157.6670278078729, 274.64788732394345], [153.62946912242685, 211.26760563380412],
        [143.39472733838932, 190.14084507042298], [134.192849404117, 161.97183098591552],
        [128.03900325027087, 161.97183098591552], [117.82592993860602, 119.71830985915494],
        [104.50704225352112, 105.6338028169015], [90.16251354279522, 91.54929577464782],
        [76.84362585771036, 77.46478873239437], [64.53593355001806, 77.46478873239414],
        [56.345250993138336, 63.38028169014103], [60.50559768869627, 7.042253521126668],
        [51.24593716143008, 35.211267605633566], [72.82773564463703, -7.04225352112644],
        [84.11700975081257, -14.084507042253335], [96.43192488262909, -21.126760563380117],
        [110.80534488985192, -35.211267605633566], [121.06897797038638, -42.253521126760006],
        [133.38389310220293, -49.29577464788758], [145.71325388226796, -70.42253521126759],
        [155.98410978692667, -84.50704225352115]
    ])
    # sort by altitude (column index 1)
    data1 = data1[data1[:,1].argsort()]
    _, idx = np.unique(data1[:,1], return_index=True)
    return data1[np.sort(idx)]


def _prepare_data2():
    data2 = np.array([
        [736.842105263158, 3.792690190732223e-9], [730.7017543859648, 8.507942799627515e-9],
        [723.6842105263158, 2.1836412339771752e-8], [714.0350877192983, 5.2396013530026554e-8],
        [705.2631578947367, 1.0272967317129136e-7], [693.859649122807, 1.8830150935310454e-7],
        [683.3333333333331, 3.016700280971453e-7], [671.0526315789473, 5.169520863226409e-7],
        [654.3859649122805, 8.85866790410065e-7], [636.8421052631579, 1.419210395452577e-6],
        [619.2982456140351, 2.4320075132679498e-6], [602.6315789473684, 3.405365585016436e-6],
        [585.9649122807018, 5.100377710991141e-6], [565.7894736842104, 7.63907784504426e-6],
        [543.859649122807, 1.1441409564019243e-5], [520.1754385964912, 1.7136342300342215e-5],
        [500.87719298245605, 2.399479031387996e-5], [477.1929824561402, 3.141058489074873e-5],
        [449.1228070175439, 4.704512425064635e-5], [424.5614035087719, 6.58739112407993e-5],
        [394.7368421052631, 1.0553385749880813e-4], [370.17543859649123, 1.5806306873781192e-4],
        [344.73684210526324, 2.7086228509336767e-4], [323.6842105263157, 4.056833039356789e-4],
        [308.7719298245614, 6.076111446650459e-4], [288.59649122807014, 1.113739507857865e-3],
        [269.298245614035, 2.0414630347954745e-3], [249.99999999999997, 3.741962364657531e-3],
        [228.94736842105266, 7.336637748600004e-3], [211.4035087719298, 1.438449888287663e-2],
        [198.24561403508773, 2.30448082815073e-2], [184.21052631578945, 4.224068906483458e-2],
        [173.68421052631578, 6.767205372282079e-2], [166.66666666666666, 9.475632026539897e-2],
        [164.03508771929822, 1.5180516552972514e-1], [164.03508771929822, 2.782559402207126e-1],
        [162.28070175438597, 5.455594781168548e-1], [161.40350877192986, 1.0696452479219296],
        [162.28070175438597, 1.9606391068744613], [160.5263157894737, 3.844105707405517],
        [157.89473684210526, 8.061813527211983], [154.3859649122807, 16.90714103473582],
        [148.24561403508773, 28.97265560913918], [142.10526315789474, 46.41588833612758],
        [134.21052631578948, 64.99283734753718], [128.07017543859655, 91.00480585213029],
        [122.80701754385967, 136.30221830031346], [117.54385964912285, 218.36412339772332],
        [114.91228070175441, 327.054314743274], [107.89473684210529, 374.1962364657538],
        [98.24561403508773, 457.9506855064374], [85.96491228070178, 599.4842503189402],
        [77.19298245614036, 784.7599703514599], [66.66666666666669, 960.4088212505379],
        [61.403508771929836, 1538.6310873807167], [55.26315789473688, 2820.2811042559924],
        [54.385964912280684, 6326.588544593854], [53.50877192982455, 15180.516552972576],
        [57.01754385964912, 34053.65585016387], [63.15789473684211, 66766.9293918757],
        [73.68421052631582, 114414.09564019546], [85.96491228070177, 183298.07108324338],
        [98.24561403508773, 256659.13434124898], [108.77192982456143, 359381.36638046254],
        [119.29824561403512, 503215.93592599983], [130.70175438596493, 658739.1124079915],
        [141.2280701754386, 922385.1039358476], [149.99999999999997, 1207456.0865147319],
        [157.01754385964912, 1477714.868970749]
    ])
    data2 = data2[data2[:,1].argsort()]
    _, idx = np.unique(data2[:,1], return_index=True)
    return data2[np.sort(idx)]

# Preloaded datasets
DATA1 = _prepare_data1()
DATA2 = _prepare_data2()


def get_temp(alt, data=DATA1):
    """Interpolate temperature at given altitude (km)."""
    f = interp1d(data[:,1], data[:,0], kind='linear', fill_value='extrapolate')
    return f(alt)


def get_pressure(alt, data_t=DATA1, data_p=DATA2):
    """Compute pressure at given altitude (km) using temperature-dependent interpolation."""
    temp = get_temp(alt, data_t)
    # find altitude of minimum temperature
    alt_min_t = data_t[np.argmin(data_t[:,0]), 1]
    # find pressure at lowest altitude in data_p (max pressure)
    min_p = data_p[np.argmin(data_p[:,0]), 1]
    # branch selection
    if alt > alt_min_t:
        mask = data_p[:,1] < min_p
    else:
        mask = data_p[:,1] > min_p
    sub = data_p[mask]
    # ensure unique altitude values
    _, idx = np.unique(sub[:,0], return_index=True)
    sub = sub[np.sort(idx)]
    # interpolate log10(pressure) over temperature axis
    interp_func = interp1d(sub[:,0], np.log10(sub[:,1]), kind='linear', fill_value='extrapolate')
    logp = interp_func(temp)
    return 10 ** logp


def get_density(alt, data_t=DATA1, data_p=DATA2):
    """Compute density at given altitude (km) from pressure and temperature."""
    pressure = get_pressure(alt, data_t, data_p)
    temp = get_temp(alt, data_t)
    R = 3.61491e3  # specific gas constant J/(kg*K)
    return pressure / (temp * R)
n=10000
altitudes=np.linspace(100,2000,n)
vectorized_rho = np.vectorize(get_density)
densities = vectorized_rho(altitudes)

vectorized_temp = np.vectorize(get_temp)
temperatures = vectorized_temp(altitudes)


plt.figure()
plt.plot(altitudes, densities)
plt.xlabel('Altitude (km)')
plt.ylabel('Density (kg/mÂ³)')
plt.title('Atmospheric Density vs. Altitude')
plt.grid(True)
plt.show()

plt.figure()
plt.plot(altitudes, temperatures)
plt.xlabel('Altitude (km)')
plt.ylabel('Temperature (K)')
plt.title('Atmospheric Temperature vs. Altitude')
plt.grid(True)
plt.show()

import scipy.io

scipy.io.savemat("NeptuneAtmos.mat", {
    "altitudes": altitudes,
    "densities": densities
})
print("Saved Neptune atmospheric profile to NeptuneAtmos.mat")
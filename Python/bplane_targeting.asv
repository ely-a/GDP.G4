function result = bplane_targeting(r_sc_jup, v_sc_jup, mu_jup, thetaB_deg)
    % Inputs:
    % r_sc_jup     - Position vector of spacecraft relative to Jupiter [km]
    % v_sc_jup     - Velocity vector of spacecraft relative to Jupiter [km/s]
    % mu_jup       - Jupiter gravitational parameter [km^3/s^2]
    % thetaB_deg   - Angle of B-vector in B-plane (from T̂ toward R̂) [degrees]

    % Compute v_inf vector (incoming relative velocity)
    v_inf = v_sc_jup;
    v_inf_mag = norm(v_inf);

    % Define Ŝ = v_inf direction
    S_hat = v_inf / v_inf_mag;

    % Define R̂ = direction of h = r x v_inf
    h_vec = cross(r_sc_jup, v_inf);
    R_hat = h_vec / norm(h_vec);

    % Define T̂ = R̂ × Ŝ
    T_hat = cross(R_hat, S_hat);

    % Build B-plane frame [T̂ R̂ Ŝ]
    B_frame = [T_hat(:), R_hat(:), S_hat(:)];

    % Compute orbit parameters
    h = norm(cross(r_sc_jup, v_inf));
    a_hyp = -mu_jup / v_inf_mag^2;
    e = 1 + h^2 / (a_hyp * mu_jup);
    rp = a_hyp * (e - 1);  % Periapsis radius [km]
    delta = 2 * asin(1 / e);  % Turn angle [rad]
    B_mag = rp * sqrt(e^2 - 1);  % Impact parameter [km]

    % B-vector in B-plane using thetaB
    thetaB = deg2rad(thetaB_deg);
    B_vector = B_mag * (cos(thetaB) * T_hat + sin(thetaB) * R_hat);

    % Output structure
    result.S_hat = S_hat;
    result.R_hat = R_hat;
    result.T_hat = T_hat;
    result.B_vector = B_vector;
    result.B_mag = B_mag;
    result.turn_angle_deg = rad2deg(delta);
    result.rp_km = rp;
end
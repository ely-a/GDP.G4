clear
clc
close all

%% Neptune Constants

mu_neptune = 6.8351e6; % km^3/s^2
mass_neptune = 102.409e24; % kg
radius_neptune = 24764; % km

%% Unperturbed Trajectory

if exist('vectors.mat', 'file') == 2
    load("vectors.mat")
    r0 = r/1000;
    v0 = v/1000;
else
    error('no intitial conditions')
end

[a, e, h, i, Omega, omega, theta] = find_OE(r0, v0, mu_neptune);

delta_theta = 1;
thetas = mod(theta:delta_theta:theta+360, 360);

r_unperturbed = zeros(3, length(thetas));
v_unperturbed = zeros(3, length(thetas));

r_unperturbed(:,1) = r0;
v_unperturbed(:,1) = v0;

for j = 2:length(thetas)
    [r0, v0] = rv_from_oe(a, e, i, Omega, omega, thetas(j), mu_neptune);
    r_unperturbed(:,j) = r0;
    v_unperturbed(:,j) = v0;
end

%% Plot trajectories

plot3(r_unperturbed(1,:), r_unperturbed(2,:), r_unperturbed(3,:), 'b-');  % blue line
grid on;
axis equal;
xlabel('X'); ylabel('Y'); zlabel('Z');
title('3D Trajectory');

%% Enckes Method
% r0 and v0 get from elya import % km

% Propogte Lagrangian
% prop_lagrangian(t)

% Calculate perturbing acceleration
% J2_acc(r_0)

% Integrate delta
% ode45

% calcaulte perturbed trajectory
% r = r0 + delta
% r0 = r and repeat

%% J2 Perturbations

function a_J2 = J2_acc(r_vec, mu, R)
    x = r_vec(1);
    y = r_vec(2);
    z = r_vec(3);
    r = norm(r_vec);

    J2 = 3.411e-3;
    J2_const = (1.5 * J2 * mu * R^2)/(r^5);

    a_J2 = J2_const * [
        x * (5 * (z/r)^2 - 1);
        y * (5 * (z/r)^2 - 1);
        z * (5 * (z/r)^2 - 3)
    ];
end